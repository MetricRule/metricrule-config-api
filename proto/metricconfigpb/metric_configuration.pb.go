// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: metric_configuration.proto

package metricconfigpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type to parse the value as.
type ParsedValue_ParsedType int32

const (
	ParsedValue_UNKNOWN ParsedValue_ParsedType = 0
	ParsedValue_STRING  ParsedValue_ParsedType = 1
	ParsedValue_INTEGER ParsedValue_ParsedType = 2
	ParsedValue_FLOAT   ParsedValue_ParsedType = 3
)

// Enum value maps for ParsedValue_ParsedType.
var (
	ParsedValue_ParsedType_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INTEGER",
		3: "FLOAT",
	}
	ParsedValue_ParsedType_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INTEGER": 2,
		"FLOAT":   3,
	}
)

func (x ParsedValue_ParsedType) Enum() *ParsedValue_ParsedType {
	p := new(ParsedValue_ParsedType)
	*p = x
	return p
}

func (x ParsedValue_ParsedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParsedValue_ParsedType) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_configuration_proto_enumTypes[0].Descriptor()
}

func (ParsedValue_ParsedType) Type() protoreflect.EnumType {
	return &file_metric_configuration_proto_enumTypes[0]
}

func (x ParsedValue_ParsedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParsedValue_ParsedType.Descriptor instead.
func (ParsedValue_ParsedType) EnumDescriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{6, 0}
}

type SidecarConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for the data from the input tensor to record as metrics.
	// Each entry represents a separate metric.
	// Optional. If empty, no input data is recorded as metrics.
	InputMetrics []*MetricConfig `protobuf:"bytes,1,rep,name=input_metrics,json=inputMetrics,proto3" json:"input_metrics,omitempty"`
	// Configuration for the data from the output to record as metrics.
	// Each entry represents a separate metric.
	// Optional. If empty, no output data is recorded as metrics.
	OutputMetrics []*MetricConfig `protobuf:"bytes,2,rep,name=output_metrics,json=outputMetrics,proto3" json:"output_metrics,omitempty"`
	// Configuration for labels parsed from the input data to be attached
	// to all metrics (input and output).
	ContextLabelsFromInput []*LabelConfig `protobuf:"bytes,3,rep,name=context_labels_from_input,json=contextLabelsFromInput,proto3" json:"context_labels_from_input,omitempty"`
	// Configuration to filter received input payload before processing metrics.
	// Optional. If empty, the full input payload is considered.
	// This should be in JSONPath format https://goessner.net/articles/JsonPath/.
	// All metric paths (e.g ParsedValue.field_path) will be evaluated relative
	// to the result of the filter.
	// This can also be used to 'split' batch inputs. For example, for KFServing
	// use ".instances[*]" for each instance to be evaluated independently.
	InputContentFilter string `protobuf:"bytes,4,opt,name=input_content_filter,json=inputContentFilter,proto3" json:"input_content_filter,omitempty"`
	// Configuration to filter received output payload before processing metrics.
	// Optional. If empty, the full output payload is considered.
	// This should be in JSONPath format https://goessner.net/articles/JsonPath/.
	// All metric paths (e.g ParsedValue.field_path) will be evaluated relative
	// to the result of the filter.
	// This can also be used to 'split' batch outputs. For example, for KFServing
	// use ".predictions[*]" for each prediction to be evaluated independently.
	OutputContentFilter string `protobuf:"bytes,5,opt,name=output_content_filter,json=outputContentFilter,proto3" json:"output_content_filter,omitempty"`
}

func (x *SidecarConfig) Reset() {
	*x = SidecarConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidecarConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarConfig) ProtoMessage() {}

func (x *SidecarConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarConfig.ProtoReflect.Descriptor instead.
func (*SidecarConfig) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *SidecarConfig) GetInputMetrics() []*MetricConfig {
	if x != nil {
		return x.InputMetrics
	}
	return nil
}

func (x *SidecarConfig) GetOutputMetrics() []*MetricConfig {
	if x != nil {
		return x.OutputMetrics
	}
	return nil
}

func (x *SidecarConfig) GetContextLabelsFromInput() []*LabelConfig {
	if x != nil {
		return x.ContextLabelsFromInput
	}
	return nil
}

func (x *SidecarConfig) GetInputContentFilter() string {
	if x != nil {
		return x.InputContentFilter
	}
	return ""
}

func (x *SidecarConfig) GetOutputContentFilter() string {
	if x != nil {
		return x.OutputContentFilter
	}
	return ""
}

// Configures a metric from either the input or output of the serving API.
type MetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric. Required.
	// This should be a snake_case string in all lowers.
	// The unit of the metric should be clearly specified.
	// e.g "output_prediction_time_to_respond_seconds"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels associated with this metric. Optional.
	Labels []*LabelConfig `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Required. The type of metric to record.
	//
	// Types that are assignable to Metric:
	//	*MetricConfig_SimpleCounter
	//	*MetricConfig_Value
	Metric isMetricConfig_Metric `protobuf_oneof:"metric"`
}

func (x *MetricConfig) Reset() {
	*x = MetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfig) ProtoMessage() {}

func (x *MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricConfig.ProtoReflect.Descriptor instead.
func (*MetricConfig) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *MetricConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricConfig) GetLabels() []*LabelConfig {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (m *MetricConfig) GetMetric() isMetricConfig_Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (x *MetricConfig) GetSimpleCounter() *SimpleCounterMetric {
	if x, ok := x.GetMetric().(*MetricConfig_SimpleCounter); ok {
		return x.SimpleCounter
	}
	return nil
}

func (x *MetricConfig) GetValue() *ValueMetric {
	if x, ok := x.GetMetric().(*MetricConfig_Value); ok {
		return x.Value
	}
	return nil
}

type isMetricConfig_Metric interface {
	isMetricConfig_Metric()
}

type MetricConfig_SimpleCounter struct {
	SimpleCounter *SimpleCounterMetric `protobuf:"bytes,100,opt,name=simple_counter,json=simpleCounter,proto3,oneof"`
}

type MetricConfig_Value struct {
	Value *ValueMetric `protobuf:"bytes,101,opt,name=value,proto3,oneof"`
}

func (*MetricConfig_SimpleCounter) isMetricConfig_Metric() {}

func (*MetricConfig_Value) isMetricConfig_Metric() {}

// A simple counter that increments by one for each matching instance.
type SimpleCounterMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SimpleCounterMetric) Reset() {
	*x = SimpleCounterMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCounterMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCounterMetric) ProtoMessage() {}

func (x *SimpleCounterMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCounterMetric.ProtoReflect.Descriptor instead.
func (*SimpleCounterMetric) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{2}
}

// A metric that tracks dynamic values (e.g to build a histogram)
type ValueMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ValueConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueMetric) Reset() {
	*x = ValueMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMetric) ProtoMessage() {}

func (x *ValueMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMetric.ProtoReflect.Descriptor instead.
func (*ValueMetric) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *ValueMetric) GetValue() *ValueConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

// A key and value to associate with each metric.
// See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#labels
type LabelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelKey   *ValueConfig `protobuf:"bytes,1,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty"`
	LabelValue *ValueConfig `protobuf:"bytes,2,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty"`
}

func (x *LabelConfig) Reset() {
	*x = LabelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelConfig) ProtoMessage() {}

func (x *LabelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelConfig.ProtoReflect.Descriptor instead.
func (*LabelConfig) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *LabelConfig) GetLabelKey() *ValueConfig {
	if x != nil {
		return x.LabelKey
	}
	return nil
}

func (x *LabelConfig) GetLabelValue() *ValueConfig {
	if x != nil {
		return x.LabelValue
	}
	return nil
}

// Configuration for the value to fill in the metric.
// In order of reduced precedence (e.g if both parsed_value and static_value are present,
// parsed_value will take precedence)
type ValueConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A value to be parsed from the application payload.
	ParsedValue *ParsedValue `protobuf:"bytes,1,opt,name=parsed_value,json=parsedValue,proto3" json:"parsed_value,omitempty"`
	// Optional. A single configured value.
	//
	// Types that are assignable to StaticValue:
	//	*ValueConfig_StringValue
	//	*ValueConfig_IntegerValue
	//	*ValueConfig_FloatValue
	StaticValue isValueConfig_StaticValue `protobuf_oneof:"static_value"`
}

func (x *ValueConfig) Reset() {
	*x = ValueConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueConfig) ProtoMessage() {}

func (x *ValueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueConfig.ProtoReflect.Descriptor instead.
func (*ValueConfig) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *ValueConfig) GetParsedValue() *ParsedValue {
	if x != nil {
		return x.ParsedValue
	}
	return nil
}

func (m *ValueConfig) GetStaticValue() isValueConfig_StaticValue {
	if m != nil {
		return m.StaticValue
	}
	return nil
}

func (x *ValueConfig) GetStringValue() string {
	if x, ok := x.GetStaticValue().(*ValueConfig_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ValueConfig) GetIntegerValue() int64 {
	if x, ok := x.GetStaticValue().(*ValueConfig_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *ValueConfig) GetFloatValue() float32 {
	if x, ok := x.GetStaticValue().(*ValueConfig_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isValueConfig_StaticValue interface {
	isValueConfig_StaticValue()
}

type ValueConfig_StringValue struct {
	StringValue string `protobuf:"bytes,100,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ValueConfig_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,101,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type ValueConfig_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,102,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*ValueConfig_StringValue) isValueConfig_StaticValue() {}

func (*ValueConfig_IntegerValue) isValueConfig_StaticValue() {}

func (*ValueConfig_FloatValue) isValueConfig_StaticValue() {}

type ParsedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path from the root message (e.g request or response) to
	// retrieve the value.
	// This should be in JSONPath format.
	// https://goessner.net/articles/JsonPath/.
	// e.g for json {f: {a: [1], b: 0}} to refer to 1, use `".f.a[0]"`
	// or `"$.f.a[0]"`.
	// Only a single JSON path expression should be provided.
	// The path should point to a single JSON value (not an array or
	// object) matching the specified parsed_type.
	FieldPath  string                 `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	ParsedType ParsedValue_ParsedType `protobuf:"varint,2,opt,name=parsed_type,json=parsedType,proto3,enum=metricrule.config.api.ParsedValue_ParsedType" json:"parsed_type,omitempty"`
}

func (x *ParsedValue) Reset() {
	*x = ParsedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedValue) ProtoMessage() {}

func (x *ParsedValue) ProtoReflect() protoreflect.Message {
	mi := &file_metric_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedValue.ProtoReflect.Descriptor instead.
func (*ParsedValue) Descriptor() ([]byte, []int) {
	return file_metric_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *ParsedValue) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *ParsedValue) GetParsedType() ParsedValue_ParsedType {
	if x != nil {
		return x.ParsedType
	}
	return ParsedValue_UNKNOWN
}

var File_metric_configuration_proto protoreflect.FileDescriptor

var file_metric_configuration_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x22, 0xea, 0x02, 0x0a, 0x0d, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x4a, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a, 0x19, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x15, 0x0a, 0x13,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x22, 0x47, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x09,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metric_configuration_proto_rawDescOnce sync.Once
	file_metric_configuration_proto_rawDescData = file_metric_configuration_proto_rawDesc
)

func file_metric_configuration_proto_rawDescGZIP() []byte {
	file_metric_configuration_proto_rawDescOnce.Do(func() {
		file_metric_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_metric_configuration_proto_rawDescData)
	})
	return file_metric_configuration_proto_rawDescData
}

var file_metric_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metric_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_metric_configuration_proto_goTypes = []interface{}{
	(ParsedValue_ParsedType)(0), // 0: metricrule.config.api.ParsedValue.ParsedType
	(*SidecarConfig)(nil),       // 1: metricrule.config.api.SidecarConfig
	(*MetricConfig)(nil),        // 2: metricrule.config.api.MetricConfig
	(*SimpleCounterMetric)(nil), // 3: metricrule.config.api.SimpleCounterMetric
	(*ValueMetric)(nil),         // 4: metricrule.config.api.ValueMetric
	(*LabelConfig)(nil),         // 5: metricrule.config.api.LabelConfig
	(*ValueConfig)(nil),         // 6: metricrule.config.api.ValueConfig
	(*ParsedValue)(nil),         // 7: metricrule.config.api.ParsedValue
}
var file_metric_configuration_proto_depIdxs = []int32{
	2,  // 0: metricrule.config.api.SidecarConfig.input_metrics:type_name -> metricrule.config.api.MetricConfig
	2,  // 1: metricrule.config.api.SidecarConfig.output_metrics:type_name -> metricrule.config.api.MetricConfig
	5,  // 2: metricrule.config.api.SidecarConfig.context_labels_from_input:type_name -> metricrule.config.api.LabelConfig
	5,  // 3: metricrule.config.api.MetricConfig.labels:type_name -> metricrule.config.api.LabelConfig
	3,  // 4: metricrule.config.api.MetricConfig.simple_counter:type_name -> metricrule.config.api.SimpleCounterMetric
	4,  // 5: metricrule.config.api.MetricConfig.value:type_name -> metricrule.config.api.ValueMetric
	6,  // 6: metricrule.config.api.ValueMetric.value:type_name -> metricrule.config.api.ValueConfig
	6,  // 7: metricrule.config.api.LabelConfig.label_key:type_name -> metricrule.config.api.ValueConfig
	6,  // 8: metricrule.config.api.LabelConfig.label_value:type_name -> metricrule.config.api.ValueConfig
	7,  // 9: metricrule.config.api.ValueConfig.parsed_value:type_name -> metricrule.config.api.ParsedValue
	0,  // 10: metricrule.config.api.ParsedValue.parsed_type:type_name -> metricrule.config.api.ParsedValue.ParsedType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_metric_configuration_proto_init() }
func file_metric_configuration_proto_init() {
	if File_metric_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metric_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidecarConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCounterMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParsedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_metric_configuration_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MetricConfig_SimpleCounter)(nil),
		(*MetricConfig_Value)(nil),
	}
	file_metric_configuration_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ValueConfig_StringValue)(nil),
		(*ValueConfig_IntegerValue)(nil),
		(*ValueConfig_FloatValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metric_configuration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metric_configuration_proto_goTypes,
		DependencyIndexes: file_metric_configuration_proto_depIdxs,
		EnumInfos:         file_metric_configuration_proto_enumTypes,
		MessageInfos:      file_metric_configuration_proto_msgTypes,
	}.Build()
	File_metric_configuration_proto = out.File
	file_metric_configuration_proto_rawDesc = nil
	file_metric_configuration_proto_goTypes = nil
	file_metric_configuration_proto_depIdxs = nil
}
